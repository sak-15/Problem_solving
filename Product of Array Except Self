TC : O(n)
SC : O(n)+O(n)

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        
        left = [nums[0]]
        for i in range(1,len(nums)):
            left.append(left[i-1]*nums[i])
            
        right = [1]*len(nums)
        right[-1]=nums[-1]
        
        for i in range(len(nums)-2,-1, -1):
            right[i]= nums[i]*right[i+1]
        
        result = [right[1]]
        
        for i in range(1,len(nums)-1):
            result.append(left[i-1]*right[i+1])
            
        result.append(left[-2])
       
        return result
        
        
TC : O(n)
SC : O(1)

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        
        result = [nums[0]]
        
        for i in range(1,len(nums)):
            result.append(result[i-1]*nums[i])
            
        product = nums[-1]
        result[-1] = result[-2]
        
        for i in range(len(nums)-2,0,-1):
            result[i] = result[i-1]* product
            product *= nums[i]
            
        result[0]= product
        
        return result
