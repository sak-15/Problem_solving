# TC- O(n)
# SC-O(n)
def trap(self, height: List[int]) -> int:
        size=0
        left=len(height)*[0]
        right=len(height)*[0]
        
        temp=0
        for i in range(len(height)):
            if temp<height[i]:
                temp=height[i]
                left[i]=temp
            else:
                left[i]=temp
        
        temp=0
        for i in range(len(height)-1,-1,-1):
            if temp<height[i]:
                temp=height[i]
                right[i]=temp
            else:
                right[i]=temp
        
        for i in range(len(height)):
            size+=abs(min(left[i],right[i])-height[i])
            
        return size


#TC-O(n)
#SC-O(1)

class Solution:
    def trap(self, height: List[int]) -> int:
        l,r=0,len(height)-1
        leftmax,rightmax=height[l],height[r]
        res=0
        
        while l<r:
            if leftmax<rightmax:
                l+=1
                leftmax=max(leftmax,height[l])
                res+=leftmax-height[l]
            else:
                r-=1
                rightmax=max(rightmax,height[r])
                res+=rightmax-height[r]
        
        return res
